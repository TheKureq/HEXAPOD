-------------------------------------------------------------------------------------------------------------
ROS2 + Docker BASICS:

	docker-compose up -d // start from compose file
	docker ps // list all running containers
	docker exec -it docker_ros2_1 bash // launch interactive terminal inside the running container
	docker stop docker_ros2_1 // stop the running container


-------------------------------------------------------------------------------------------------------------
TUTORIAL ABOUT ROS2:

	https://www.youtube.com/playlist?list=PLLSegLrePWgJudpPUof4-nVFHGkB62Izy


-------------------------------------------------------------------------------------------------------------
CHANGE .git OWNERSHIP (if it requires sudo to run):

	sudo chown -R <owner>:<group> .git
	sudo chmod -R 775 .git
	
	(chown might be sufficient)
-------------------------------------------------------------------------------------------------------------
DOCKER install process (Raspberry / Linux):

	curl -fsSL https://get.docker.com -o get-docker.sh
	chmod +x get-docker.sh 
	sudo apt-get purge docker-ce docker-ce-cli containerd.io -y
	./get-docker.sh
	sudo usermod -aG docker pi (pi is the user name)
	sudo systemctl unmask docker
	sudo chmod 666 /var/run/docker.sock
	pip3 -v install docker-compose
	sudo systemctl start docker
	sudo init 6


-------------------------------------------------------------------------------------------------------------
Docker building the container:

	get the dockerfile & docker-compose.yml (whole repo suggested)
	cd HEXAPOD/docker
	docker build -t ros2 . (ros2 is the image name of the file we created)


-------------------------------------------------------------------------------------------------------------
Running & connecting to the container:

	docker-compose up -d (running the container, can check with "docker ps")
	docker exec -it docker_ros2_1 bash (or docker-ros2-1, can check with that "docker ps" command)


-------------------------------------------------------------------------------------------------------------
Running ROS:

	if the "ros2" command does not work we have to specify the source with "source /opt/ros/humble/setup.bash" (should be automatic tho)


-------------------------------------------------------------------------------------------------------------
ROS Workspace:

	cd /ros2
	mkdir first_app
	cd first_app
	mkdir src
	colcon build
	lssource install/setup.bash
	chmod 777 -R ../first_app
	# now create the .py script => whatever You please
	colcon build
	python3 src/myPythonScript.py


-------------------------------------------------------------------------------------------------------------
Create Custom ROS2 pkg:

	cd ros2_ws/src
	ros2 pkg create my_robot_controller --build-type ament_python --dependencies rclpy
	cd ros2_ws (cd ..)
	colcon build
		'-> if(1 package had stderr output: my_robot_controller){
					sudo apt update && sudo apt install pip -y
					// pip3 list | grep setuptools
					// setuptools == 59.6.0 so we have to downgrade
					pip install setuptools==58.2.0
			  }
	colcon build (again, but should work this time)
	chmod 777 -R ros2_ws/ (to make shure we can edit files from within the VSC)


-------------------------------------------------------------------------------------------------------------
Create Custom ROS2 Node:

	cd ros2_ws/src/my_robot_controller/my_robot_controller/
	chmod +x my_first_node.py
	./my_first_node.py


-------------------------------------------------------------------------------------------------------------
Install Custom ROS2 Node:

	cd ros2_ws/src/my_robot_controller/
	nano setup.py 
		entry_points={
			'console_scripts': [
				"test_node = my_robot_controller.my_first_node:main"
			],
		},
	cd ros2_ws
	colcon build
	source ~/.bashrc
	ros2 run my_robot_controller test_node

	// reflect all the changes in real time without building it on every code change
	colcon build --symlink-install
	source ~/.bashrc


-------------------------------------------------------------------------------------------------------------
ROS2 Node commands:

	ros2 node list
	ros2 node info /first_node


-------------------------------------------------------------------------------------------------------------
ROS2 Topics:

	Topic is a way of communicating between 2 (or more) nodes.
	
	ros2 topic list // list the topics
	ros2 topic info /chatter // info about a specific topic
	ros2 interface show std_msg/msg/String // show the interface info of std_msg/msg/String Type
	ros2 topic echo /chatter // show the messages of the topic /chatter (like a listener)


-------------------------------------------------------------------------------------------------------------	
ROS2 Publisher with Python:
	
	Add the msg dependency to the "package.xml" file (or any You might need):
		<depend>std_msgs</depend>
		<depend>geometry_msgs</depend>
		<depend>turtlesim</depend>


-------------------------------------------------------------------------------------------------------------
ROS2 Subscriber with Python:

	we have to know the name of the topic which we want to listen to and the msg type we are going to listen to
	i.e. /turtle1/pose as a topic and turtlesim/msg/Pose as a type


-------------------------------------------------------------------------------------------------------------	
ROS2 Closed Loop System with a Publisher and a Subscriber:

	create both subscriber and publisher inside of a single node


-------------------------------------------------------------------------------------------------------------	
ROS2 Services:

	Enables the client-server like functionality => 
		the closed loop system makes it possible so that we can send and read messages between 2 nodes BUT we can not do a request and response SO... we use the ROS2 SERVICE for that.
		
	Using rqt_graph tool you can see nodes and topics but you CAN NOT see services!
		ros2 service list
		ros2 service type /add_two_ints
		ros2 interface show example_interfaces/srv/AddTwoInts
		

	We are using services mainly for 2 kinds of requests:
	- compute the data and get the response
		ros2 service call /add_two_ints example_interfaces/srv/AddTwoInts "{'a': 2, 'b': 5}"

	- change of settings of our robot
		ros2 service call /turtle1/set_pen turtlesim/srv/SetPen "{'r': 255, 'g': 0, 'b': 0, 'width': 3, 'off': 0}"
		
	TOPICS => send data streams between 2 points without expecting the answer
	SERVICE => data exchange requires interaction like changing the setting or doing some computational work where the answer is necessary
	

-------------------------------------------------------------------------------------------------------------
Writing a ROS2 Service Client with Python:

	We should not overload the service with 10000 requests per second!
	We can check the frequency of the topic publishing:
		ros2 topic hz /turtle1/pose
		to try and limit the service calls based on the topic subscription.